import contracts from './contracts'
import { FarmConfig, QuoteToken } from './types'
import {
  SIX,
  FINIX,
  WKLAY,
  OUSDT,
  KDAI,
  OETH,
  OWBTC,
  OXRP,
  OBNB,
  KSP,
  getLpNetwork,
  getSingleLpNetwork,
  FAVOR,
} from './tokens'
import { ColorStyles } from '@fingerlabs/definixswap-uikit-v2'

const farms: FarmConfig[] = [
  /**
   * @favor
   */
  {
    pid: process.env.REACT_APP_CHAIN_ID === process.env.REACT_APP_MAINNET_ID ? 36 : 95,
    lpSymbol: 'Favor-FINIX LP',
    lpAddresses: getLpNetwork(FAVOR, FINIX),
    tokenSymbol: 'Favor',
    tokenAddresses: FAVOR,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.favor,
    secondToken: contracts.finix,
    firstSymbol: QuoteToken.FAVOR,
    secondSymbol: QuoteToken.FINIX,
    isFinished: false,
  },
  {
    pid: process.env.REACT_APP_CHAIN_ID === process.env.REACT_APP_MAINNET_ID ? 35 : 96,
    lpSymbol: 'Favor-SIX LP',
    lpAddresses: getLpNetwork(FAVOR, SIX),
    tokenSymbol: 'Favor',
    tokenAddresses: FAVOR,
    quoteTokenSymbol: QuoteToken.SIX,
    quoteTokenAdresses: contracts.six,
    firstToken: contracts.favor,
    secondToken: contracts.six,
    firstSymbol: QuoteToken.FAVOR,
    secondSymbol: QuoteToken.SIX,
    isFinished: false,
  },
  {
    pid: process.env.REACT_APP_CHAIN_ID === process.env.REACT_APP_MAINNET_ID ? 37 : 94,
    lpSymbol: 'Favor-KLAY LP',
    lpAddresses: getLpNetwork(FAVOR, WKLAY),
    tokenSymbol: 'Favor',
    tokenAddresses: FAVOR,
    quoteTokenSymbol: QuoteToken.KLAY,
    quoteTokenAdresses: contracts.wklay,
    firstToken: contracts.favor,
    secondToken: contracts.wklay,
    firstSymbol: QuoteToken.FAVOR,
    secondSymbol: QuoteToken.KLAY,
    isFinished: false,
  },
  {
    pid: process.env.REACT_APP_CHAIN_ID === process.env.REACT_APP_MAINNET_ID ? 34 : 93,
    lpSymbol: 'Favor-oUSDT LP',
    lpAddresses: getLpNetwork(FAVOR, OUSDT),
    tokenSymbol: 'Favor',
    tokenAddresses: FAVOR,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.favor,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.FAVOR,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 0,
    lpSymbol: 'FINIX',
    lpAddresses: getSingleLpNetwork(FINIX),
    tokenSymbol: 'FINIX',
    tokenAddresses: FINIX,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    isFinished: false,
  },
  {
    pid: 1,
    lpSymbol: 'SIX',
    lpAddresses: getSingleLpNetwork(SIX),
    tokenSymbol: 'SIX',
    tokenAddresses: SIX,
    quoteTokenSymbol: QuoteToken.SIX,
    quoteTokenAdresses: contracts.six,
    isFinished: false,
  },
  {
    pid: 2,
    lpSymbol: 'FINIX-SIX LP',
    lpAddresses: getLpNetwork(FINIX, SIX),
    tokenSymbol: 'SIX',
    tokenAddresses: SIX,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.finix,
    secondToken: contracts.six,
    firstSymbol: QuoteToken.FINIX,
    secondSymbol: QuoteToken.SIX,
    tag: 'hot',
    isFinished: false,
  },
  {
    pid: 3,
    lpSymbol: 'FINIX-KLAY LP',
    lpAddresses: getLpNetwork(FINIX, WKLAY),
    tokenSymbol: 'KLAY',
    tokenAddresses: WKLAY,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.finix,
    secondToken: contracts.wklay,
    firstSymbol: QuoteToken.FINIX,
    secondSymbol: QuoteToken.KLAY,
    tag: 'hot',
    isFinished: false,
  },
  {
    pid: 4,
    lpSymbol: 'FINIX-KSP LP',
    lpAddresses: getLpNetwork(FINIX, KSP),
    tokenSymbol: 'KSP',
    tokenAddresses: KSP,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.finix,
    secondToken: contracts.ksp,
    isFinished: false,
  },
  {
    pid: 5,
    lpSymbol: 'FINIX-oUSDT LP',
    lpAddresses: getLpNetwork(FINIX, OUSDT),
    tokenSymbol: 'oUSDT',
    tokenAddresses: OUSDT,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.finix,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.FINIX,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 6,
    lpSymbol: 'SIX-oUSDT LP',
    lpAddresses: getLpNetwork(SIX, OUSDT),
    tokenSymbol: 'SIX',
    tokenAddresses: SIX,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.six,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.SIX,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 7,
    lpSymbol: 'SIX-KLAY LP',
    lpAddresses: getLpNetwork(SIX, WKLAY),
    tokenSymbol: 'KLAY',
    tokenAddresses: WKLAY,
    quoteTokenSymbol: QuoteToken.SIX,
    quoteTokenAdresses: contracts.six,
    firstToken: contracts.six,
    secondToken: contracts.wklay,
    firstSymbol: QuoteToken.SIX,
    secondSymbol: QuoteToken.KLAY,
    isFinished: false,
  },
  {
    pid: 8,
    lpSymbol: 'KLAY-oETH LP',
    lpAddresses: getLpNetwork(WKLAY, OETH),
    tokenSymbol: 'oETH',
    tokenAddresses: OETH,
    quoteTokenSymbol: QuoteToken.KLAY,
    quoteTokenAdresses: contracts.wklay,
    firstToken: contracts.wklay,
    secondToken: contracts.oeth,
    firstSymbol: QuoteToken.KLAY,
    secondSymbol: QuoteToken.OETH,
    isFinished: true,
  },
  {
    pid: 9,
    lpSymbol: 'KLAY-oWBTC LP',
    lpAddresses: getLpNetwork(WKLAY, OWBTC),
    tokenSymbol: 'oWBTC',
    tokenAddresses: OWBTC,
    quoteTokenSymbol: QuoteToken.KLAY,
    quoteTokenAdresses: contracts.wklay,
    firstToken: contracts.wklay,
    secondToken: contracts.owbtc,
    firstSymbol: QuoteToken.KLAY,
    secondSymbol: QuoteToken.OWBTC,
    isFinished: true,
  },
  {
    pid: 10,
    lpSymbol: 'KLAY-oXRP LP',
    lpAddresses: getLpNetwork(WKLAY, OXRP),
    tokenSymbol: 'oXRP',
    tokenAddresses: OXRP,
    quoteTokenSymbol: QuoteToken.KLAY,
    quoteTokenAdresses: contracts.wklay,
    firstToken: contracts.wklay,
    secondToken: contracts.oxrp,
    firstSymbol: QuoteToken.KLAY,
    secondSymbol: QuoteToken.OXRP,
    isFinished: true,
  },
  {
    pid: 11,
    lpSymbol: 'oETH-oUSDT LP',
    lpAddresses: getLpNetwork(OETH, OUSDT),
    tokenSymbol: 'oETH',
    tokenAddresses: OETH,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.oeth,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.OETH,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 12,
    lpSymbol: 'oWBTC-oUSDT LP',
    lpAddresses: getLpNetwork(OWBTC, OUSDT),
    tokenSymbol: 'oWBTC',
    tokenAddresses: OWBTC,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.owbtc,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.OWBTC,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 13,
    lpSymbol: 'oXRP-oUSDT LP',
    lpAddresses: getLpNetwork(OXRP, OUSDT),
    tokenSymbol: 'oXRP',
    tokenAddresses: OXRP,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.oxrp,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.OXRP,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 14,
    lpSymbol: 'KLAY-oUSDT LP',
    lpAddresses: getLpNetwork(WKLAY, OUSDT),
    tokenSymbol: 'KLAY',
    tokenAddresses: WKLAY,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.wklay,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.KLAY,
    secondSymbol: QuoteToken.OUSDT,
  },
  {
    pid: 15,
    lpSymbol: 'KDAI-oUSDT LP',
    lpAddresses: getLpNetwork(KDAI, OUSDT),
    tokenSymbol: 'KDAI',
    tokenAddresses: KDAI,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.kdai,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.KDAI,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: false,
  },
  {
    pid: 16,
    lpSymbol: 'oBNB-oUSDT LP',
    lpAddresses: getLpNetwork(OBNB, OUSDT),
    tokenSymbol: 'oBNB',
    tokenAddresses: OBNB,
    quoteTokenSymbol: QuoteToken.OUSDT,
    quoteTokenAdresses: contracts.ousdt,
    firstToken: contracts.obnb,
    secondToken: contracts.ousdt,
    firstSymbol: QuoteToken.OBNB,
    secondSymbol: QuoteToken.OUSDT,
    isFinished: true,
  },
  {
    pid: 17,
    lpSymbol: 'oBNB-FINIX LP',
    lpAddresses: getLpNetwork(OBNB, FINIX),
    tokenSymbol: 'oBNB',
    tokenAddresses: OBNB,
    quoteTokenSymbol: QuoteToken.FINIX,
    quoteTokenAdresses: contracts.finix,
    firstToken: contracts.obnb,
    secondToken: contracts.finix,
    firstSymbol: QuoteToken.OBNB,
    secondSymbol: QuoteToken.FINIX,
    isFinished: true,
  },
]

export const FAVOR_FARMS = farms.filter(
  ({ tokenSymbol, firstSymbol, secondSymbol }) =>
    tokenSymbol === 'Favor' ||
    tokenSymbol === 'FAVOR' ||
    firstSymbol === 'FAVOR' ||
    firstSymbol === 'Favor' ||
    secondSymbol === 'FAVOR' ||
    secondSymbol === 'Favor',
)

export const TAG_COLORS = {
  hot: ColorStyles.RED,
  special: ColorStyles.YELLOW,
}

export default farms
